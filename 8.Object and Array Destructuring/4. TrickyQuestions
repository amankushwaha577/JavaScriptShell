const obj = { a: 1 };
Object.freeze(obj);
obj.a = 2;
console.log(obj.a); // Output: 1

// Explanation:
// -----------------
// Object.freeze() makes the object immutable. 
// Any attempts to modify its properties are ignored in strict mode or fail silently otherwise.



const obj = {};
console.log(obj.toString()); // Output: [object Object]

// Explanation:
// ---------------------
// The default toString() method in Object.prototype returns a string in the format: [object Object]
// A. The first object indicates that it is an object.
// B. The second Object is the internal [[Class]] property of the object (now standardized as [[Prototype]] or its constructor).




// ========================================================================
// Common Pitfalls to Practice:
// ========================================================================

const { x = 10, y = 20 } = { x: 5 };
console.log(x); // Output: 5
console.log(y); // Output: 20

/* 
1. { x = 10, y = 20 } means:
        x will take its value from the given object, or default to 10 if x is missing.
        y will take its value from the given object, or default to 20 if y is missing.

2. Provided Object: { x: 5 } :
        x exists in the object with a value of 5, so x = 5.
        y is not present in the object, so y takes its default value of 20. */

        
// Key Points to Remember:
// 1. Default values are only used when the property is ""missing or undefined"".
const { a = 42 } = { a: undefined };
console.log(a); // Output: 42 (default value used)

const { b = 42 } = { b: null };
console.log(b); // Output: null (default value ignored)



